#include <iostream>
#include <string>

extern int g_buffer[8];

#include "cpu.h"
#include "ram.h"
#include "disk.h"
#include "gpu.h"
#include "kbd.h"

int main() {
    std::cout << "Computer simulator project." << std::endl;

    std::string command;
    do {
        std::cout << "Input command (sum/save/load/display/input/exit):" << std::endl;
        std::cin >> command;
        if (command == "sum") {
            sum();
        } else if (command == "save") {
            save();
        } else if (command == "load") {
            load();
        } else if (command == "display") {
            display();
        } else if (command == "input") {
            input();
        } else if (command != "exit"){
            std::cout << "Invalid command!" << std::endl;
        }
    } while (command != "exit");

    return 0;
}
/*
Задание 2. Проект симулятора работы компьютера


Что нужно сделать

Реализуйте простую модель работы персонального компьютера в качестве многомодульного проекта. В компьютере несколько
 основных, условных компонент.

Центральный процессор (cpu) — должен иметь в себе функцию compute, которая складывает 8 чисел из буфера оперативной
 памяти (см. далее) и выводит результат в консоль.

Оперативная память (ram) — содержит буфер на 8 целых чисел, которые можно заполнить функцией write и считать функцией
 read.

Жёсткий диск (disk) — имеет в себе две функции, save и load. Функция save должна сохранить состояние 8 чисел из
 оперативной памяти на постоянный носитель в файл data.txt. Функция load — загрузить их с носителя в оперативную память.

Графическая карта (gpu) — выводит в консоль 8 чисел из оперативной памяти.

Клавиатура (kbd) — позволяет ввести 8 чисел и разместить их в оперативной памяти.



Каждая компонента должна располагаться в отдельном модуле, с отдельным заголовочным файлом. Основной модуль программы
 (main.cpp) должен считывать пользовательский ввод команды, которая соответствует отдельным функциям устройств:
 sum (вычисление суммы),
 save (сохранить в файл),
 load (загрузить из файла),
 input (ввести с клавиатуры),
 display (вывестина экран).
 Команда exit — выходит из программы.



Советы и рекомендации
Тщательно продумайте зависимости между модулями и теми файлами, которые должны быть включены в те или иные исходные
 файлы. Не забывайте про #pragma once в заголовочных файлах.

В заголовочных файлах модулей располагайте только объявления функций. Их определения должны быть уже в исходных файлах
 (.cpp).



Что оценивается
Корректность работы программы и составленного CMake-файла конфигурации проекта.



Как отправить задание на проверку
Пришлите ссылку на repl.it или файл .срр с решением через форму для сдачи домашнего задания.
 */