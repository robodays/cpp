USE <bd> - подключение к БД
SHOW TABLES; - список таблиц
DESCRIBE <tab>; - описание таблицы
DESCRIBE <tab>\G; - описание таблицы в виде строк

Выборка:
SELECT * FROM <tab>;
SELECT <field1>, <field2> FROM <tab>;
SELECT * FROM <tab> WHERE <field> = "<valueSTRING>";

Выборка с условием
SELECT <field1>, <field2> FROM <tab> WHERE  <field3> > <valueINT>;
SELECT <field1>, <field2> FROM <tab> WHERE  <field3> > <valueINT> AND <field4> > <valueINT>;

Сортировка
SELECT * FROM <tab> ORDER BY <field1> - сортировка по возрастанию <field1>;
SELECT * FROM <tab> ORDER BY <field1> DESC - сортировка по убыванию <field1>;
SELECT * FROM <tab> ORDER BY <field1> DESC, <field2> ASC - сортировка по убыванию <field1>, а потом сортировка по возрастанию <field2>;

Лимит
SELECT * FROM <tab> LIMIT <INT> - вывод лимит <INT> строк
SELECT * FROM <tab> ORDER BY <field1> DESC LIMIT <INT>- сортировка по убыванию <field1> и  - вывод лимит <INT> строк;

Уникальные
SELECT DISTINCT <field1> FROM <tab>; - Уникальные значения повторяющихся значений поля
SELECT DISTINCT <field1>, <field2> FROM <tab>; - Уникальные пары значений повторяющихся значений полей

ИТОГ
SELECT <field1>, <field2> 
FROM <tab> 
WHERE  <field3> > <valueINT> AND <field4> > <valueINT> 
ORDER BY <field1> DESC, <field2> ASC 
LIMIT <INT>

Объединенные запросы
(SELECT <tab1field> FROM <tab1>)
UNION 
(SELECT <tab2field> FROM <tab2>); - выводит только уникальные как DISTINCT 

(SELECT <tab1field> FROM <tab1>)
UNION 
(SELECT ALL <tab2field> FROM <tab2>); - ALL выводит все записи

ФУНКЦИИ
Модернизация
SELECT <field1>, <field1> * 12 FROM <tab>; - выводит <field1> и <field1> * 12
SELECT <field1> AS <pseudonym1>, <field1> * 12 AS <pseudonym2> FROM <tab>; - выводит <field1> и <field1> * 12 с псевдонимом <pseudonym1> и <pseudonym2>
	пример SELECT salary AS monthly_salary, salary * 12 AS annual_salary FROM Teachers
SELECT salary AS monthly_salary, salary * 12 AS annual_salary FROM Teachers

Вычисление даты
SELECT DATEDIFF(NOW(), <field1>) AS <pseudonym1> FROM <tab>; - вычисление даты из текущей
	пример SELECT DATEDIFF(NOW(), registration_date) AS days FROM Students;

IF условие
SELECT <field1>, IF(<fielsd2> > <INT>, "<printSTRING>", <print2INT>) AS <pseudonym1> FROM <tab>;
	пример SELECT name, IF(students_count > 500, "FULL", "NOT FULL") AS status FROM Courses;

CONCAT
SELECT CONCAT("<printSTRING>", <fielsd1>" <printSTRING>:", <fielsd2>) FROM <tab>;
	пример SELECT CONCAT("Name:", name, " price:", price) FROM Courses;
		| CONCAT("Name:", name, " price:", price)                                        |
		| Name:Веб-разработчик c 0 до PRO price:189600                                   |
		| Name:Мобильный разработчик с нуля price:138000

COUNT - количество строк
SELECT COUNT(*) FROM Students; 
	пример SELECT COUNT(*) FROM <tab>;

AVG - среднее значение
SELECT AVG(<field1INT>) FROM Students;
	пример SELECT AVG(age) FROM <tab>;

MAX
SELECT AVG(<field1INT>), MAX(<field2INT>), MAX(<field3INT>) FROM <tab>;
	пример  SELECT AVG(duration), MAX(students_count), MAX(price) FROM Courses;
		| AVG(duration) | MAX(students_count) | MAX(price) |
		|       10.2174 |                1100 |     213750 |

SUM
SELECT SUM(<field1INT>) as <pseudonym1> FROM <tab> WHERE <fielsd2> = <value>;
	пример SELECT SUM(duration) as total FROM Courses WHERE type = "MARKETING";


JOIN - Объединение двух таблиц
SELECT <field1>, 
<tab1>.<field1> AS <pseudonym1>, 
<tab2>.<field2> AS <pseudonym2> 
FROM <tab1> 
JOIN <tab2> ON <tab2>.<field_connect1> = <tab1>.<field_connect2> 
WHERE <tab1>.<field3> = "MANAGEMENT" 
ORDER BY <tab2>.<field4> LIMIT <valueINT>;
	Пример	SELECT price, 
		Courses.name AS course_name, 
		Teachers.name AS teacher_name 
		FROM Courses 
		JOIN Teachers ON Teachers.id = Courses.teacher_id 
		WHERE type = "MANAGEMENT" 
		ORDER BY price LIMIT 4;
	Пример	SELECT courses.name AS courses_name,
		students.name AS student_name
		FROM Courses 
		JOIN subscriptions ON courses.id = subscriptions.course_id
		JOIN students ON students.id = subscriptions.student_id
		WHERE type = "DESIGN" 
		ORDER BY subscription_date;

GROUP BY - Группировка
SELECT <field1>, AVG(<field2>) FROM <tab1> GROUP BY <field1>;
	пример	SELECT type, AVG(price) FROM courses GROUP BY type;
	пример	SELECT teachers.name AS teacher_name, COUNT(*) AS course_count 
		FROM courses 
		JOIN teachers ON teachers.id = courses.teacher_id
		GROUP BY teachers.id 
		ORDER BY course_count  		или ORDER BY COUNT(*) 
		DESC LIMIT 5;

INSERT INTO - Вставка новой записи
INSERT INTO <tab> (<field1>, <field2>, <field3>, <field4>) 
VALUES ("<STRING1>", <valueINT2>, <valueINT3>, <valueINT4>);
	пример	INSERT INTO courses (name, duration, price, teacher_id) VALUES ("SQL2", 3, 88888, 2);


UPDATE - Изменение записи
UPDATE <tab> SET <field1> = 8000 WHERE <field2> = <value>;
	пример 	UPDATE courses SET price = 8000 WHERE id =47;
		UPDATE courses SET price = price * 0.95 WHERE type = "DESIGN";

Подзапросы
SELECT <field1>, (SELECT COUNT(*) FROM <tab2> WHERE <tab1>.<field2> < <tab2>.<field2>) AS <pseudonym> 
FROM <tab1>
ORDER BY <pseudonym> DESC
	Пример 	SELECT name, (SELECT COUNT(*) FROM teachers WHERE students.age < teachers.age) AS older_count 
		FROM students 
		ORDER BY older_count DESC 
		LIMIT 10;

Создание таблиц
CREATE TABLE <tab1> (
<field1> <TYPE1>,
<field2> <TYPE2>,
<field3> <TYPE3>,
<field4> <TYPE4>);
	Пример	CREATE TABLE purchaselistnew (
		student_name VARCHAR(500),
		course_name VARCHAR(500),
		price INT,
		subscription_date DATETIME);

INSERT SELECT - вставка новых записей по выбранным данным
INSERT INTO <tab1> (<field1>, <field2>, <field3>, <field4>) 
SELECT <field1>, <field2>, <field3>, <field4> FROM <tab2>;
	Пример 	SELECT students.name AS student_name, courses.name AS course_name, price, subscription_date 
		FROM courses
		JOIN subscriptions on subscriptions.course_id = courses.id
		JOIN students on students.id = subscriptions.student_id;

		INSERT INTO purchaselistnew(student_name, course_name, price, subscription_date)
		SELECT students.name AS student_name, courses.name AS course_name, price, subscription_date
		FROM courses
		JOIN subscriptions on subscriptions.course_id = courses.id
		JOIN students on students.id = subscriptions.student_id;

Добавление колонки в таблицу
ALTER TABLE <tab1> ADD COLUMN <new_field> FLOAT;
	Пример 	ALTER TABLE courses ADD COLUMN price_per_hour_new FLOAT;

Заполнение новой колонки
UPDATE <tab1> SET <field1> = <field2> / <field3>;
	Пример 	UPDATE courses SET price_per_hour_new = price / duration;


ДЗ:
#1.1. Написать запрос для выбора студентов в порядке их регистрации.
SELECT * FROM skillbox.students 
ORDER BY registration_date;

#1.2. Написать запрос для выбора 5 самых дорогих курсов, на которых более 4 студентов, 
# и которые длятся более 10 часов.
SELECT * FROM courses 
WHERE students_count > 4 AND duration > 10 ORDER BY price DESC LIMIT 5;

#1.3. Написать один (!) запрос, который выведет одновременно список из имен трёх самых молодых
# студентов, имен трёх самых старых учителей и названий трёх самых продолжительных курсов.
(SELECT name FROM students ORDER BY age LIMIT 3)
UNION
(SELECT name FROM teachers ORDER BY age DESC LIMIT 3)
UNION
(SELECT name FROM courses ORDER BY duration DESC LIMIT 3);

#2.1. Написать запрос для выбора среднего возраста всех учителей с зарплатой более 10 000.
SELECT AVG(age) AS middle_age_teachers
FROM teachers 
WHERE salary > 1000;

#2.2. Написать запрос для расчета суммы, сколько будет стоить купить все курсы по дизайну.
SELECT SUM(price) AS all_courses_design 
FROM courses 
WHERE type = "DESIGN";

#2.3. Написать запрос для расчёта, сколько минут (!) длятся все курсы по программированию.
SELECT SUM(duration) * 60 AS length_course_min
FROM courses 
WHERE type = "PROGRAMMING";

#3.1. Напишите запрос, который выводит сумму, сколько часов должен в итоге проучиться каждый 
# студент (сумма длительности всех курсов на которые он подписан).
# В результате запрос возвращает две колонки: Имя Студента — Количество часов.
SELECT students.name, SUM(duration) AS all_hours FROM students
JOIN subscriptions ON students.id = subscriptions.student_id
JOIN courses ON courses.id = subscriptions.course_id
GROUP BY students.id;

#3.2. Напишите запрос, который посчитает для каждого учителя средний возраст его учеников.
# В результате запрос возвращает две колонки: Имя Учителя — Средний Возраст Учеников.
SELECT teachers.name, AVG(students.age) AS middle_age_students FROM teachers
JOIN courses ON teachers.id = courses.teacher_id
JOIN subscriptions ON courses.id = subscriptions.course_id
JOIN students ON students.id = subscriptions.student_id
GROUP BY teachers.id;

#3.3. Напишите запрос, который выводит среднюю зарплату учителей для каждого типа курса 
# (Дизайн/Программирование/Маркетинг и т.д.).
# В результате запрос возвращает две колонки: Тип Курса — Средняя зарплата.
SELECT type, AVG (teachers.salary) AS middle_salary_teachers FROM courses
JOIN teachers ON teachers.id = courses.teacher_id
GROUP BY courses.type;













